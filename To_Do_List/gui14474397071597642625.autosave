/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:Clock:614979:
  appc.background(230);
} //_CODE_:Clock:614979:

public void Clock1_turn1(GKnob source, GEvent event) { //_CODE_:Clock1:409380:
  println("Clock1 - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:Clock1:409380:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  Clock = GWindow.getWindow(this, "Window title", 0, 0, 240, 120, JAVA2D);
  Clock.noLoop();
  Clock.setActionOnClose(G4P.KEEP_OPEN);
  Clock.addDrawHandler(this, "win_draw1");
  Clock1 = new GKnob(Clock, 90, 30, 60, 60, 0.8);
  Clock1.setTurnRange(110, 70);
  Clock1.setTurnMode(GKnob.CTRL_HORIZONTAL);
  Clock1.setSensitivity(1);
  Clock1.setShowArcOnly(false);
  Clock1.setOverArcOnly(false);
  Clock1.setIncludeOverBezel(false);
  Clock1.setShowTrack(true);
  Clock1.setLimits(0.0, 0.0, 60.0);
  Clock1.setNbrTicks(60);
  Clock1.setStickToTicks(true);
  Clock1.setShowTicks(true);
  Clock1.setOpaque(false);
  Clock1.addEventHandler(this, "Clock1_turn1");
  Clock.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow Clock;
GKnob Clock1; 
